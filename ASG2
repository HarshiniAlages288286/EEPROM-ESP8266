#include <ESP8266WiFi.h>
#include <EEPROM.h>
#include <ESP8266WebServer.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

ESP8266WebServer server(80);  // Create a web server on port 80

// Define output pin (replace with your actual output pin)
#define OUTPUT_PIN D4

// OLED display settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Variables to store configuration data (read from EEPROM)
String storedSsid, storedPassword, deviceId;
int lastOutputState;

// EEPROM addresses for storing data
#define WIFI_SSID_ADDR 0
#define WIFI_PASSWORD_ADDR 64
#define LAST_OUTPUT_STATE_ADDR 192
#define DEVICE_ID_ADDR 128

// Function to read Wi-Fi credentials from EEPROM
void readWifiConfigFromEEPROM() {
  int i;
  char c;

  // Read SSID
  storedSsid = "";
  for (i = 0; i < 32; i++) {
    c = EEPROM.read(WIFI_SSID_ADDR + i);
    if (c == '\0') break;
    storedSsid += c;
  }
  Serial.print("Read SSID: ");
  Serial.println(storedSsid);

  // Read Password
  storedPassword = "";
  for (i = 0; i < 32; i++) {
    c = EEPROM.read(WIFI_PASSWORD_ADDR + i);
    if (c == '\0') break;
    storedPassword += c;
  }
  Serial.print("Read Password: ");
  Serial.println(storedPassword);

  // Read Device ID
  deviceId = "";
  for (i = 0; i < 32; i++) {
    c = EEPROM.read(DEVICE_ID_ADDR + i);
    if (c == '\0') break;
    deviceId += c;
  }
  Serial.print("Read Device ID: ");
  Serial.println(deviceId);

  // Read Last Output State
  lastOutputState = EEPROM.read(LAST_OUTPUT_STATE_ADDR);
  Serial.print("Read Last Output State: ");
  Serial.println(lastOutputState);
}

void setup() {
  Serial.begin(9600);
  delay(1000);

  EEPROM.begin(512);  // Initialize EEPROM with a size of 512 bytes

  // Initialize output pin
  pinMode(OUTPUT_PIN, OUTPUT);

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }

  display.clearDisplay();
  display.display();

  // Read Wi-Fi credentials from EEPROM
  readWifiConfigFromEEPROM();

  // Display initial output state
  updateDisplay();

  // Check if Wi-Fi credentials are stored
  if (storedSsid.length() == 0 || storedPassword.length() == 0) {
    Serial.println("No WiFi credentials found! Starting AP mode.");
    startAccessPoint();
  } else {
    // Attempt to connect to WiFi using stored credentials
    connectToWifi();
  }
}

void loop() {
  // Handle client requests
  server.handleClient();

  // Check WiFi connection and reconnect if necessary
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Reconnecting to WiFi...");
    connectToWifi();
  } else {
    // Normal operation: set output based on last saved state
    digitalWrite(OUTPUT_PIN, lastOutputState);
  }
  delay(1000);  // Add a delay between checks (optional)
}

void connectToWifi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(storedSsid);
  WiFi.begin(storedSsid.c_str(), storedPassword.c_str());

  int attemptCount = 0;
  while (WiFi.status() != WL_CONNECTED && attemptCount < 30) { // Attempt to connect for 15 seconds
    delay(500);
    Serial.print(".");
    attemptCount++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println(" Connected!");
  } else {
    Serial.println(" Failed to connect. Starting AP mode.");
    startAccessPoint();
  }
}

void startAccessPoint() {
  WiFi.mode(WIFI_AP);
  WiFi.softAP("ESP8266_Config", "");  // Replace with a unique access point name
  IPAddress apIP = WiFi.softAPIP();

  Serial.print("Connected to AP. Use this URL to configure: http://");
  Serial.println(apIP);

  setupWebServer();
}

void setupWebServer() {
  server.on("/", handleRoot);
  server.on("/save", HTTP_POST, handleSave);
  server.begin();
  Serial.println("Web server started");
}

void handleRoot() {
  String content = "<!DOCTYPE html><html><head><title>ESP8266 Configuration</title></head><body>";
  content += "<h1>Configure ESP8266</h1>";
  content += "<form action='/save' method='POST'>";
  content += "  <label for='ssid'>SSID:</label>";
  content += "  <input type='text' name='ssid' value='" + storedSsid + "'><br>";
  content += "  <label for='password'>Password:</label>";
  content += "  <input type='password' name='password' value='" + storedPassword + "'><br>";
  content += "  <label for='deviceId'>Device ID:</label>";
  content += "  <input type='text' name='deviceId' value='" + deviceId + "'><br>";
  content += "  <label for='outputState'>Output State:</label>";
  content += "  <select name='outputState'>";
  content += "    <option value='1'" + String(lastOutputState == HIGH ? " selected" : "") + ">ON</option>";
  content += "    <option value='0'" + String(lastOutputState == LOW ? " selected" : "") + ">OFF</option>";
  content += "  </select><br>";
  content += "  <input type='submit' value='Save'>";
  content += "</form>";
  content += "</body></html>";

  server.send(200, "text/html", content);
}

void handleSave() {
  String ssid = server.arg("ssid");
  String password = server.arg("password");
  deviceId = server.arg("deviceId");
  int outputState = server.arg("outputState").toInt();

  Serial.print("Saving SSID: ");
  Serial.println(ssid);
  Serial.print("Saving Password: ");
  Serial.println(password);
  Serial.print("Saving Device ID: ");
  Serial.println(deviceId);
  Serial.print("Saving Output State: ");
  Serial.println(outputState);

  // Save SSID to EEPROM
  for (int i = 0; i < 32; i++) {
    if (i < ssid.length()) {
      EEPROM.write(WIFI_SSID_ADDR + i, ssid[i]);
    } else {
      EEPROM.write(WIFI_SSID_ADDR + i, '\0');
    }
  }

  // Save Password to EEPROM
  for (int i = 0; i < 32; i++) {
    if (i < password.length()) {
      EEPROM.write(WIFI_PASSWORD_ADDR + i, password[i]);
    } else {
      EEPROM.write(WIFI_PASSWORD_ADDR + i, '\0');
    }
  }

  // Save Device ID to EEPROM
  for (int i = 0; i < 32; i++) {
    if (i < deviceId.length()) {
      EEPROM.write(DEVICE_ID_ADDR + i, deviceId[i]);
    } else {
      EEPROM.write(DEVICE_ID_ADDR + i, '\0');
    }
  }

  // Save Output State to EEPROM
  EEPROM.write(LAST_OUTPUT_STATE_ADDR, outputState);

  EEPROM.commit();  // Commit changes to EEPROM

  // Update local variables
  storedSsid = ssid;
  storedPassword = password;
  lastOutputState = outputState;

  // Update display
  updateDisplay();

  // Respond to client
  server.send(200, "text/html", "<h1>Configuration Saved! Rebooting...</h1>");
  delay(2000);
  ESP.restart();
}

void updateDisplay() {
  display.clearDisplay();
  display.setTextSize(2);      // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);

  display.setCursor(0, 0);
  if (lastOutputState == HIGH) {
    display.println("ON");
  } else {
    display.println("OFF");
  }

  display.display();
}
